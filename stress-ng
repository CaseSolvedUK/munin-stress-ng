#!/usr/bin/env bash

# munin plugin that uses stress-ng to measure cpu, memory and disk throughput
# configure the plugin with `user root`

# Spawned as a subshell to create & parse stress-ng measurements
# If the plugin is not run for 6 minutes, this process will terminate
# It does this by monitoring the access (read) time of the log file
# The plugin deletes the file when munin-node runs and takes the measurements
logprefix="/tmp/munin-stress-ng"
measurement_process() {
  age="0"
  while [ $age -lt "360" ]
  do
    stress-ng --cpu 0 --memrate 0 --iomix 0 -t 1s --sequential 0 --metrics --quiet --yaml "$logprefix.yml" >/dev/null 2>&1
    retval=$?
    eval $(parse_yaml "$logprefix.yml" "STRESS_")
    rm -f "$logprefix.yml"

    cpu=$STRESS_metrics_cpu_bogo_ops_per_second_real_time
    memrate=$STRESS_metrics_memrate_bogo_ops_per_second_real_time
    iomix=$STRESS_metrics_iomix_bogo_ops_per_second_real_time
    echo "$cpu $memrate $iomix $retval" >> "$logprefix.log"

    access=$(stat --format="%X" "$logprefix.log")
    age=$(($(date -u +%s)-access))
  done
  rm -f "$logprefix.pid"
  rm -f "$logprefix.log"
}

# Calculates the min, avg, max, stddev stats from columns of datasets
calc_stats() {
  # Create dummy reading if log file doesn't exist
  if [ ! -f "$1" ]; then
    for key in ${keys[@]}; do
      printf "0 " >> "$1"
    done
    printf "\n" >> "$1"
  fi

  awk '
  {
    for (i=1; i<=NF; i++) {
      if ($i>max[i]) max[i]=$i
      if (NR==1) min[i]=$i
      else if ($i<min[i]) min[i]=$i
      sum[i] += $i
      sumsq[i] += ($i)^2
    }
  }
  END {
    for (i=1; i<=NF; i++) {
      printf "%f %f %f %f\n", min[i], sum[i]/NR, max[i], sqrt((sumsq[i]-(sum[i]^2/NR))/NR);
    }
  }' "$1"
}

# Parses the many stress-ng readings, outputs for munin and removes the log
keys=(cpu memrate iomix retval)
stats=(min avg max stddev)
parse_log() {
  local i=0
  calc_stats "$logprefix.log" | while read -r ${stats[@]}
  do
    key=${keys[$i]}
    printf "\nmultigraph stress_ng_${key}\n"
    for stat in ${stats[@]}
    do
      if [[ ! ($key = "retval" && $stat = "stddev") ]]; then
        echo "${key}_${stat}.value ${!stat}"
      fi
    done
    ((i++))
  done
  rm -f "$logprefix.log"
}

# Parses the stress-ng yaml output
parse_yaml() {
  while read -r
  do
    local line="$REPLY" prefix="$2" s="[[:space:]]+" w="[[:alnum:]_-]+"
    value=""
    if   [[ "$line" =~ ^($w): ]]; then section="${BASH_REMATCH[1]//-/_}_"
    elif [[ "$line" =~ ^$s-($s)stressor:$s($w) ]]; then stressor="${BASH_REMATCH[2]//-/_}_"
    elif [[ "$line" =~ ^$s($w):$s(.*) ]]; then key="${BASH_REMATCH[1]//-/_}"; value="${BASH_REMATCH[2]}"
    fi
    if [ "$value" != "" ]; then echo "$prefix$section$stressor$key='$value'"; value=""; fi
  done < "$1"
}

# Start stress_ng if not already running
start_stress_ng() {
  if [ ! -f "$logprefix.pid" ]; then
    measurement_process &
    echo "$!" > "$logprefix.pid"
  fi

  pid=$(<"$logprefix.pid")
  ps $pid >/dev/null 2>&1
  if [ "$?" -eq 1 ]; then
    measurement_process &
    echo "$!" > "$logprefix.pid"
  fi
}

# Outputs the munin config. GAUGE keeps the original value
output_config() {
  for key in ${keys[@]}
  do
    if [ $key = "retval" ]; then
      printf "\nmultigraph stress_ng_${key}\n"
      echo "graph_title exit code"
      echo "graph_category stress-ng"
      echo "graph_vlabel code number"
      echo "graph_info The stress-ng exit code, non-zero values are errors"

      echo "${key}_max.label maximum"
      echo "${key}_max.type GAUGE"
      echo "${key}_max.min 0"
      echo "${key}_max.draw AREA"

      echo "${key}_min.label minimum"
      echo "${key}_min.type GAUGE"
      echo "${key}_min.min 0"
      echo "${key}_min.draw LINE2"

      echo "${key}_avg.label average"
      echo "${key}_avg.type GAUGE"
      echo "${key}_avg.min 0"
      echo "${key}_avg.draw LINE2"
    else
      printf "\nmultigraph stress_ng_${key}\n"
      echo "graph_title ${key} throughput"
      echo "graph_category stress-ng"
      echo "graph_vlabel bogo-ops/s (realtime)"
      echo "graph_info The number of ${key} operations available per second"

      echo "${key}_max.label maximum"
      echo "${key}_max.type GAUGE"
      echo "${key}_max.min 0"
      echo "${key}_max.draw AREA"

      echo "${key}_min.label minimum"
      echo "${key}_min.type GAUGE"
      echo "${key}_min.min 0"
      echo "${key}_min.draw LINE2"

      echo "${key}_avg.label average"
      echo "${key}_avg.type GAUGE"
      echo "${key}_avg.min 0"
      echo "${key}_avg.draw LINE2"

      echo "${key}_stddev.label std. deviation"
      echo "${key}_stddev.type GAUGE"
      echo "${key}_stddev.min 0"
      echo "${key}_stddev.draw LINE2"
    fi
  done
  start_stress_ng
}

case "$1" in
  config)
    output_config;;
  suggest)
    echo "ln -s /root/munin-stress-ng/stress-ng /etc/munin/plugins/stress_ng";;
  start)
    start_stress_ng;;
  stop)
    kill $(<"$logprefix.pid");;
  *)
    parse_log;;
esac
